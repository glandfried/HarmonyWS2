## Auto-generated Hui-Walter model created by runjags version 2.2.1-0 on 2021-06-28

model{

	## Observation layer:

	# Complete observations (N=501):
	for(p in 1:Populations){
		Tally_RRR[1:8,p] ~ dmulti(prob_RRR[1:8,p], N_RRR[p])

		prob_RRR[1:8,p] <- se_prob[1:8,p] + sp_prob[1:8,p]
	}

	# Partial observations (Test1: Missing, Test2: Recorded, Test3: Recorded; N=63):
	for(p in 1:Populations){
		Tally_MRR[1:4,p] ~ dmulti(prob_MRR[1:4,p], N_MRR[p])

		prob_MRR[1:4,p] <-	se_prob[c(1,3,5,7),p] + sp_prob[c(1,3,5,7),p] +
							se_prob[c(2,4,6,8),p] + sp_prob[c(2,4,6,8),p]
	}

	# Partial observations (Test1: Recorded, Test2: Recorded, Test3: Missing; N=223):
	for(p in 1:Populations){
		Tally_RRM[1:4,p] ~ dmulti(prob_RRM[1:4,p], N_RRM[p])

		prob_RRM[1:4,p] <-	se_prob[c(1,2,3,4),p] + sp_prob[c(1,2,3,4),p] +
							se_prob[c(5,6,7,8),p] + sp_prob[c(5,6,7,8),p]
	}

	# Partial observations (Test1: Recorded, Test2: Missing, Test3: Recorded; N=120):
	for(p in 1:Populations){
		Tally_RMR[1:4,p] ~ dmulti(prob_RMR[1:4,p], N_RMR[p])

		prob_RMR[1:4,p] <-	se_prob[c(1,2,5,6),p] + sp_prob[c(1,2,5,6),p] +
							se_prob[c(3,4,7,8),p] + sp_prob[c(3,4,7,8),p]
	}

	# Partial observations (Test1: Recorded, Test2: Missing, Test3: Missing; N=49):
	for(p in 1:Populations){
		Tally_RMM[1:2,p] ~ dmulti(prob_RMM[1:2,p], N_RMM[p])

		prob_RMM[1:2,p] <-	se_prob[c(1,2),p] + sp_prob[c(1,2),p] +
							se_prob[c(3,4),p] + sp_prob[c(3,4),p] +
							se_prob[c(5,6),p] + sp_prob[c(5,6),p] +
							se_prob[c(7,8),p] + sp_prob[c(7,8),p]
	}

	# Partial observations (Test1: Missing, Test2: Recorded, Test3: Missing; N=23):
	for(p in 1:Populations){
		Tally_MRM[1:2,p] ~ dmulti(prob_MRM[1:2,p], N_MRM[p])

		prob_MRM[1:2,p] <-	se_prob[c(1,3),p] + sp_prob[c(1,3),p] +
							se_prob[c(2,4),p] + sp_prob[c(2,4),p] +
							se_prob[c(5,7),p] + sp_prob[c(5,7),p] +
							se_prob[c(6,8),p] + sp_prob[c(6,8),p]
	}

	# Partial observations (Test1: Missing, Test2: Missing, Test3: Recorded; N=10):
	for(p in 1:Populations){
		Tally_MMR[1:2,p] ~ dmulti(prob_MMR[1:2,p], N_MMR[p])

		prob_MMR[1:2,p] <-	se_prob[c(1,5),p] + sp_prob[c(1,5),p] +
							se_prob[c(2,6),p] + sp_prob[c(2,6),p] +
							se_prob[c(3,7),p] + sp_prob[c(3,7),p] +
							se_prob[c(4,8),p] + sp_prob[c(4,8),p]
	}


	## Observation probabilities:

	for(p in 1:Populations){

		# Probability of observing Test1- Test2- Test3- from a true positive::
		se_prob[1,p] <- prev[p] * ((1-se[1])*(1-se[2])*(1-se[3]) +covse12 +covse13 +covse23)
		# Probability of observing Test1- Test2- Test3- from a true negative::
		sp_prob[1,p] <- (1-prev[p]) * (sp[1]*sp[2]*sp[3] +covsp12 +covsp13 +covsp23)

		# Probability of observing Test1+ Test2- Test3- from a true positive::
		se_prob[2,p] <- prev[p] * (se[1]*(1-se[2])*(1-se[3]) -covse12 -covse13 +covse23)
		# Probability of observing Test1+ Test2- Test3- from a true negative::
		sp_prob[2,p] <- (1-prev[p]) * ((1-sp[1])*sp[2]*sp[3] -covsp12 -covsp13 +covsp23)

		# Probability of observing Test1- Test2+ Test3- from a true positive::
		se_prob[3,p] <- prev[p] * ((1-se[1])*se[2]*(1-se[3]) -covse12 +covse13 -covse23)
		# Probability of observing Test1- Test2+ Test3- from a true negative::
		sp_prob[3,p] <- (1-prev[p]) * (sp[1]*(1-sp[2])*sp[3] -covsp12 +covsp13 -covsp23)

		# Probability of observing Test1+ Test2+ Test3- from a true positive::
		se_prob[4,p] <- prev[p] * (se[1]*se[2]*(1-se[3]) +covse12 -covse13 -covse23)
		# Probability of observing Test1+ Test2+ Test3- from a true negative::
		sp_prob[4,p] <- (1-prev[p]) * ((1-sp[1])*(1-sp[2])*sp[3] +covsp12 -covsp13 -covsp23)

		# Probability of observing Test1- Test2- Test3+ from a true positive::
		se_prob[5,p] <- prev[p] * ((1-se[1])*(1-se[2])*se[3] +covse12 -covse13 -covse23)
		# Probability of observing Test1- Test2- Test3+ from a true negative::
		sp_prob[5,p] <- (1-prev[p]) * (sp[1]*sp[2]*(1-sp[3]) +covsp12 -covsp13 -covsp23)

		# Probability of observing Test1+ Test2- Test3+ from a true positive::
		se_prob[6,p] <- prev[p] * (se[1]*(1-se[2])*se[3] -covse12 +covse13 -covse23)
		# Probability of observing Test1+ Test2- Test3+ from a true negative::
		sp_prob[6,p] <- (1-prev[p]) * ((1-sp[1])*sp[2]*(1-sp[3]) -covsp12 +covsp13 -covsp23)

		# Probability of observing Test1- Test2+ Test3+ from a true positive::
		se_prob[7,p] <- prev[p] * ((1-se[1])*se[2]*se[3] -covse12 -covse13 +covse23)
		# Probability of observing Test1- Test2+ Test3+ from a true negative::
		sp_prob[7,p] <- (1-prev[p]) * (sp[1]*(1-sp[2])*(1-sp[3]) -covsp12 -covsp13 +covsp23)

		# Probability of observing Test1+ Test2+ Test3+ from a true positive::
		se_prob[8,p] <- prev[p] * (se[1]*se[2]*se[3] +covse12 +covse13 +covse23)
		# Probability of observing Test1+ Test2+ Test3+ from a true negative::
		sp_prob[8,p] <- (1-prev[p]) * ((1-sp[1])*(1-sp[2])*(1-sp[3]) +covsp12 +covsp13 +covsp23)

	}


	## Priors:

	# Prevalence in population 1:
	prev[1] ~ dbeta(1,1)

	# Prevalence in population 2:
	prev[2] ~ dbeta(1,1)


	# Sensitivity of Test1 test:
	se[1] ~ dbeta(1,1)T(1-sp[1], )
	# Specificity of Test1 test:
	sp[1] ~ dbeta(1,1)

	# Sensitivity of Test2 test:
	se[2] ~ dbeta(1,1)T(1-sp[2], )
	# Specificity of Test2 test:
	sp[2] ~ dbeta(1,1)

	# Sensitivity of Test3 test:
	se[3] ~ dbeta(1,1)T(1-sp[3], )
	# Specificity of Test3 test:
	sp[3] ~ dbeta(1,1)


	# Covariance in sensitivity between Test1 and Test2 tests:
	# covse12 ~ dunif( (se[1]-1)*(1-se[2]) , min(se[1],se[2]) - se[1]*se[2] )  ## if the sensitivity of these tests may be correlated
	 covse12 <- 0  ## if the sensitivity of these tests can be assumed to be independent
	# Covariance in specificity between Test1 and Test2 tests:
	# covsp12 ~ dunif( (sp[1]-1)*(1-sp[2]) , min(sp[1],sp[2]) - sp[1]*sp[2] )  ## if the specificity of these tests may be correlated
	 covsp12 <- 0  ## if the specificity of these tests can be assumed to be independent

	# Covariance in sensitivity between Test1 and Test3 tests:
	# covse13 ~ dunif( (se[1]-1)*(1-se[3]) , min(se[1],se[3]) - se[1]*se[3] )  ## if the sensitivity of these tests may be correlated
	 covse13 <- 0  ## if the sensitivity of these tests can be assumed to be independent
	# Covariance in specificity between Test1 and Test3 tests:
	# covsp13 ~ dunif( (sp[1]-1)*(1-sp[3]) , min(sp[1],sp[3]) - sp[1]*sp[3] )  ## if the specificity of these tests may be correlated
	 covsp13 <- 0  ## if the specificity of these tests can be assumed to be independent

	# Covariance in sensitivity between Test2 and Test3 tests:
	# covse23 ~ dunif( (se[2]-1)*(1-se[3]) , min(se[2],se[3]) - se[2]*se[3] )  ## if the sensitivity of these tests may be correlated
	 covse23 <- 0  ## if the sensitivity of these tests can be assumed to be independent
	# Covariance in specificity between Test2 and Test3 tests:
	# covsp23 ~ dunif( (sp[2]-1)*(1-sp[3]) , min(sp[2],sp[3]) - sp[2]*sp[3] )  ## if the specificity of these tests may be correlated
	 covsp23 <- 0  ## if the specificity of these tests can be assumed to be independent

}

#monitor# se, sp, prev, covse12, covsp12, covse13, covsp13, covse23, covsp23

## Inits:
inits{
"se" <- c(0.5, 0.99, 0.5)
"sp" <- c(0.99, 0.75, 0.99)
"prev" <- c(0.05, 0.95)
# "covse12" <- 0
# "covse13" <- 0
# "covse23" <- 0
# "covsp12" <- 0
# "covsp13" <- 0
# "covsp23" <- 0
}
inits{
"se" <- c(0.99, 0.5, 0.99)
"sp" <- c(0.75, 0.99, 0.75)
"prev" <- c(0.95, 0.05)
# "covse12" <- 0
# "covse13" <- 0
# "covse23" <- 0
# "covsp12" <- 0
# "covsp13" <- 0
# "covsp23" <- 0
}

## Data:
data{
"Populations" <- 2
"N_RRR" <- c(263, 238)
"Tally_RRR" <- structure(c(171, 14, 1, 0, 17, 2, 11, 47, 95, 6, 3, 7, 10, 11, 24, 82), .Dim = c(8, 2))
"N_MRR" <- c(32, 31)
"Tally_MRR" <- structure(c(21, 1, 4, 6, 15, 1, 0, 15), .Dim = c(4, 2))
"N_RRM" <- c(115, 108)
"Tally_RRM" <- structure(c(87, 6, 2, 20, 49, 6, 15, 38), .Dim = c(4, 2))
"N_RMR" <- c(61, 59)
"Tally_RMR" <- structure(c(44, 1, 4, 12, 32, 2, 5, 20), .Dim = c(4, 2))
"N_RMM" <- c(18, 31)
"Tally_RMM" <- structure(c(16, 2, 22, 9), .Dim = c(2, 2))
"N_MRM" <- c(12, 11)
"Tally_MRM" <- structure(c(8, 4, 5, 6), .Dim = c(2, 2))
"N_MMR" <- c(4, 6)
"Tally_MMR" <- structure(c(2, 2, 3, 3), .Dim = c(2, 2))
}

